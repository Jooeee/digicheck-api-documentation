openapi: 3.0.2
info:
  title: DigiCheck速
  description: |
    The Digicheck速 RESTful API allows you to fully interact with the DigiCheck速 platform to submit applications, track progress, manage submissions and retrieve results. To create a sandbox envrionment, please contact DigiCheck速.

    Last update: 2024-06-21
  termsOfService: https://unitecompliance.co.uk/api-terms-and-conditions
  contact:
    name: DigiCheck
    email: technical@digicheck.io
    url: https://unitecompliance.co.uk/apis
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  x-logo:
    url: https://digicheck.io/storage/temp/digi-check/icon.png
externalDocs:
  description: Check out our other APIs here
  url: http://swagger.io
servers:
  - url: https://dev.digicheck.io/api
    description: Sandbox Server
  - url: https://digicheck.io/api
    description: Production Server

tags:
  - name: connection
    description: Connection Testing
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io

  - name: application
    description: Everything related to applications
    externalDocs:
      description: Find out more
      url: http://swagger.io

  - name: result
    description: Everything related to results

  - name: billing
    description: Everything releated to billing

paths:
  /application/dbs/submit:
    post:
      tags:
        - application
      summary: Submit a standard or enhanced DBS application
      description: Submit a standard or enchanced DBS application
      operationId: submitDbs
      requestBody:
        description: Submit a standard or enchanced DBS application
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/standardEnhancedDbs"
          application/xml:
            schema:
              $ref: "#/components/schemas/standardEnhancedDbs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/standardEnhancedDbs"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dbsSuccess"
            application/xml:
              schema:
                $ref: "#/components/schemas/standardEnhancedDbs"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dbsSuccess"
      security:
        - api-key: []

  /application/basic-ds/submit:
    post:
      tags:
        - application
      summary: Submit a basic Disclosure Scotland application
      description: Submit a basic Disclosure Scotland application
      operationId: submitBasicDs
      requestBody:
        description: Submit a basic Disclosure Scotland application
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/scottishDs"
          application/xml:
            schema:
              $ref: "#/components/schemas/scottishDs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/scottishDs"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/standardEnhancedDbs"
            application/xml:
              schema:
                $ref: "#/components/schemas/standardEnhancedDbs"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
        "422":
          description: Validation exception
      security:
        - api-key: []

  /application/basic-dbs/submit:
    post:
      tags:
        - application
      summary: Submit a basic DBS application
      description: Submit a basic DBS application
      operationId: submitBasicDbs
      requestBody:
        description: Submit a basic DBS application
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/standardEnhancedDbs"
          application/xml:
            schema:
              $ref: "#/components/schemas/standardEnhancedDbs"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/standardEnhancedDbs"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/standardEnhancedDbs"
            application/xml:
              schema:
                $ref: "#/components/schemas/standardEnhancedDbs"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
        "422":
          description: Validation exception
      security:
        - api-key: []

  /application/comment/{applicationReference}:
    post:
      tags:
        - application
      summary: Add a comment to an application
      description: This can only be done by the logged in user.
      operationId: updateApplicationComment
      parameters:
        - name: applicationReference
          in: path
          description: The application reference to add the comment to
          required: true
          schema:
            type: string
      requestBody:
        description: Add a comment to an application
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/postComment"
          application/xml:
            schema:
              $ref: "#/components/schemas/postComment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/postComment"

      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response200"
              example:
                status: success
                msg: Your comment has been added.

            application/xml:
              schema:
                $ref: "#/components/schemas/response200"
              example:
                status: success
                msg: Your comment has been added.

      security:
        - api-key: []

    get:
      tags:
        - application
      summary: Get the comments of an application by application reference
      description: Write a description Dylan
      operationId: getApplicationComments
      parameters:
        - name: applicationReference
          in: path
          description: The application reference to get the comments from
          required: true
          explode: false
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getComments"

            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getComments"
        "400":
          description: Invalid status value
      security:
        - api-key: []

  /application/status/{applicationReference}:
    get:
      tags:
        - application
      summary: Get the status of an application by application reference
      description: needs description
      operationId: getStatus
      parameters:
        - name: applicationReference
          in: path
          description: The application reference to get status of
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getStatus"

            application/xml:
              schema:
                $ref: "#/components/schemas/getStatus"
        "400":
          description: Invalid status value
      security:
        - api-key: []

  /application/audit-log/{applicationReference}:
    get:
      tags:
        - application
      summary: Get the audit log of an application by application reference
      description: description
      operationId: getAuditLog
      parameters:
        - name: applicationReference
          in: path
          description: The application reference to get the audit log from
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getAuditLog"
                example:
                  action: Application Tracked
                  applicationStatus: In Progress
                  User:
                    name: Joe Bloggs
                  date_time: 2020/12/25 10:10:10 AM

            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getAuditLog"
                example:
                  action: Application Tracked
                  applicationStatus: In Progress
                  User:
                    name: Joe Bloggs
                  date_time: 2020/12/25 10:10:10 AM

        "400":
          description: Invalid status value
      security:
        - api-key: []

  /connection/test:
    get:
      tags:
        - connection
      summary: Test connection to the API
      description: Send a GET request to this endpoint to verify that your connection to the server is functioning properly.
      operationId: connectionTest
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectionTestResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/connectionTestResult"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response401"
      security:
        - api-key: []

  /result/{applicationReference}:
    get:
      tags:
        - result
      summary: Get results by application reference
      description: Description
      operationId: getResult
      parameters:
        - name: applicationReference
          in: path
          description: The application reference to get the result of
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getResult"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/getResult"
        "400":
          description: Invalid tag value
      security:
        - api-key: []

  /result/report/{applicationReference}:
    get:
      tags:
        - result
      summary: Get an appliction PDF report by application reference
      description: Returns a URL to download a PDF report
      operationId: getResultPDF
      parameters:
        - name: applicationReference
          in: path
          description: The application reference to get the result PDF of
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getResultPDF"
            application/xml:
              schema:
                $ref: "#/components/schemas/getResultPDF"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
      security:
        - api-key: []

  /billing/transactions/{MM-YYYY}:
    get:
      tags:
        - billing
      summary: Get all the transactions in a specified month
      description: Returns a URL to download a PDF report
      operationId: getTransactions
      parameters:
        - name: MM-YYYY
          in: path
          description: The application reference to get the result PDF of
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getResultPDF"
            application/xml:
              schema:
                $ref: "#/components/schemas/getResultPDF"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
      security:
        - api-key: []

  /billing/invoice/{MM-YYYY}:
    get:
      tags:
        - billing
      summary: Get the invoice total and all the transactions paid by invoice in a specified month
      description: Returns the invoice amount, currency and all the transactions in the specified month.
      operationId: getInvoice
      parameters:
        - name: MM-YYYY
          in: path
          description: The application reference to get the result PDF of
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getResultPDF"
            application/xml:
              schema:
                $ref: "#/components/schemas/getResultPDF"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
      security:
        - api-key: []

  /billing/transaction/{applicationReference}:
    get:
      tags:
        - billing
      summary: Get the details of a transaction by reference
      description: Returns the details of a specified transaction.
      operationId: getTransaction
      parameters:
        - name: applicationReference
          in: path
          description: The application reference details of
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getResultPDF"
            application/xml:
              schema:
                $ref: "#/components/schemas/getResultPDF"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
      security:
        - api-key: []

  /billing/wallet:
    get:
      tags:
        - billing
      summary: Get the balance of the wallet
      description: Returns the balance in the wallet
      operationId: getWallet

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getResultPDF"
            application/xml:
              schema:
                $ref: "#/components/schemas/getResultPDF"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
      security:
        - api-key: []

components:
  schemas:
    standardEnhancedDbs:
      type: object
      properties:
        encryption:
          description: Set this to true if the payload is encrypted. A payload with AES 256-bit encryption in ECB mode is accepted. The AES key size is 32 bytes (256 bits). Please refer to the relevant schema for details.
          type: boolean
          example: false
        title:
          description: The applicant's title.
          type: string
          enum:
            - BARON
            - BARONESS
            - BRIGADIER
            - CANON
            - CAPTAIN
            - DR
            - DUCHESS
            - DUKE
            - ESQ
            - FATHER
            - HON
            - INSPECTOR
            - LADY
            - LORD
            - LT COL
            - MAJOR
            - MISS
            - MOST REVER
            - MR
            - MRS
            - MS
            - PASTOR
            - PROFESSOR
            - RABBI
            - REV DR
            - REVEREND
            - RT REVEREN
            - SIR
            - SISTER
            - SQUADRON L
            - WG CDR

        products:
          description: The level of check required.
          type: array
          items:
            enum:
              - enhanced-dbs-check
              - standard-dbs-check
            example: enhanced-dbs-check

        volunteer:
          description: If the applicant is a volunteer set this to true.
          type: boolean
          format: boolean
          example: false

        adultFirstCheck:
          description: If an Adult First Check is required set this to true. Please note that additional charges apply.
          type: boolean
          format: boolean
          example: false

        updateService:
          description: Set this to true to add the applicant to the update service. Please note that additional charges apply.
          type: boolean
          format: boolean
          example: false

        forename:
          description: The applicant's forename.
          type: string
          example: Joe
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'

        surname:
          description: The applicant's surname.
          type: string
          example: Blogs
          minLength: 2
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'

        middleNames:
          description: The applicant's middle name(s). This array is limited to 3 values.
          type: string
          format: array
          maxItems: 3
          minLength: 1
          maxLength: 60
          pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
          example:
            - middlenameone
            - middlenametwo

        dob:
          description: The applicant's date of birth.
          type: string
          format: dd-mm-yyyy
          pattern: "\\d{2}-\\d{2}-\\d{4}"
          example: 30-01-2000

        gender:
          description: The applicant's gender. Only female and male values are accepted here due to government constraints. Please contact us if you require further information.
          type: string
          enum:
            - male
            - female
          example: male

        birthCountry:
          description: The applicant's country of birth.
          $ref: "#/components/schemas/countryCodes"
          example: GB

        birthTown:
          description: The applicant's town of birth.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake Town

        birthNationality:
          description: The applicant's birth nationality.
          $ref: "#/components/schemas/countryCodes"
          example: GB

        birthCounty:
          description: The applicant's country of birth.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake County

        email:
          description: The applicant's email.
          type: string
          format: email
          minLength: 1
          maxLength: 64
          pattern: '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/'
          example: applicantsemail@exampletext.co.uk

        niNumber:
          description: The applicant's national insurance number.
          type: string
          minLength: 9
          maxLength: 9
          pattern: "([A-Z0-9]+)|([A-Z0-9][A-Z 0-9]*)"
          example: AA111111B

        isSurnameChanged:
          description: If the applicants surname has changed, this must be declared here.
          type: object
          required:
            - status
          properties:
            status:
              description: Indicates if the applicant's surname has changed. Set this to true if the surname has changed or if the applicant is female and their title is anything other than MISS.
              type: boolean
              example: true

            birthSurname:
              description: The applicant's birth surname. This field is required if the surname has changed or if the applicant is female and their title is anything other than MISS.
              type: string
              minLength: 1
              maxLength: 60
              pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
              example: Jones

            birthForename:
              description: The applicant's birth forename. This field is required if the surname has changed or if the applicant is female and their title is anything other than MISS.
              type: string
              minLength: 1
              maxLength: 60
              pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
              example: Joe

            usedUntilMonth:
              description: The month until which the applicant used their birth surname (2 digits).
              type: string
              pattern: '^\d{2}$'
              format: mm
              example: "05"

            usedUntilYear:
              description: The year until which the applicant used their birth surname (4 digits).
              type: string
              format: yyyy
              pattern: '^\d{4}$'
              example: "2020"

        isNationalityChanged:
          description: If the applicant's nationality has changed, this must be declared here.
          type: object
          required:
            - status
          properties:
            status:
              description: Indicates if the applicant's nationality has changed. Set this to true if the nationality has changed.
              type: boolean

            newNationality:
              description: The applicants new nationality.
              $ref: "#/components/schemas/countryCodes"
              example: US

        hasOtherNames:
          description: If the applicant has had any other names that have not been previously declared, these must be included here.
          type: object
          required:
            - status
          properties:
            status:
              description: Indicates if the applicant has had any other names that have yet to be declared. Set this to true if the applicant has undeclared names.
              type: boolean

            names:
              type: array
              description: The structure for providing the applicant's other names.
              maxItems: 200
              items:
                type: object
                properties:
                  type:
                    description: The type of name the applicant used. Only Forename or Surname types are accepted here.
                    type: string
                    enum:
                      - forename
                      - surname
                    example: forename

                  name:
                    description: The name used.
                    type: string
                    minLength: 1
                    maxLength: 60
                    pattern: '([A-Z]+)|([A-Z][A-Z &apos;\-]*[A-Z])'
                    example: Dave

                  usedFromMonth:
                    description: The month from which the applicant used this name (2 digits).
                    type: string
                    format: mm
                    pattern: '^\d{2}$'
                    example: "01"

                  usedFromYear:
                    description: The year from which the applicant used this name (4 digits).
                    type: string
                    format: yyyy
                    pattern: '^\d{4}$'
                    example: "2010"

                  usedUntilMonth:
                    description: The month until which the applicant used this name (2 digits).
                    type: string
                    pattern: '^\d{2}$'
                    format: mm
                    example: "05"

                  usedUntilYear:
                    description: The year until which the applicant used this name (4 digits).
                    type: string
                    format: yyyy
                    pattern: '^\d{4}$'
                    example: "2020"

        currentAddress:
          description: The applicant's current address.
          $ref: "#/components/schemas/currentAddress"

        previousAddress:
          description: A 5 year address history is required. Please include the applicant's previous addresses here if they have any.
          type: array
          maxItems: 200
          items:
            $ref: "#/components/schemas/previousAddress"

        passport:
          type: object
          description: The strucute to provide the applicant's passport details.
          properties:
            status:
              description: Indicates whether the applicant is providing passport details. Set this to true if they are.
              type: boolean
              example: true

            number:
              type: string
              description: The passport number of the applicant.
              minLength: 1
              maxLength: 11
              pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
              example: "123456789"

            issueCountry:
              description: The country code where the passport was issued.
              $ref: "#/components/schemas/countryCodes"
              example: GB

            dateOfIssue:
              description: The date when the passport was issued.
              type: string
              format: dd-mm-yyyy
              pattern: "\\d{2}-\\d{2}-\\d{4}"
              example: 01-12-2023

            dob:
              description: The date of birth displayed on the passport.
              type: string
              format: dd-mm-yyyy
              pattern: "\\d{2}-\\d{2}-\\d{4}"
              example: 30-01-2000

        drivingLicence:
          description: The structure to provide the applicant's driving licence details.
          type: object
          properties:
            status:
              description: Indicates whether the applicant is providing driving licence details. Set this to true if they are.
              type: boolean
              example: true

            number:
              description: The driving licence number of the applicant.
              type: string
              minLength: 1
              maxLength: 18
              pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
              example: "12345678"

            issueCountry:
              description: The country code where the driving licence was issued. Only licences from GB (Great Britain), GI (Gibraltar), GG (Guernsey), IE (Ireland), IM (Isle of Man), and JE (Jersey) are accepted.
              minLength: 2
              maxLength: 2
              type: string
              enum:
                - GB
                - GI
                - GG
                - IE
                - IM
                - JE
              example: GB

            dateOfIssue:
              description: The date when the driving licence was issued.
              type: string
              format: dd-mm-yyyy
              pattern: "\\d{2}-\\d{2}-\\d{4}"
              example: 01-12-2023

            type:
              description: The type of driving licence, either 'photo' for a photo card licence or 'paper' for a paper licence.
              type: string
              maxLength: 5
              minLength: 5
              enum:
                - photo
                - paper
              example: photo

        unspentConvictions:
          description: If the applicant has any unspent convictions they must be declared here.
          type: boolean
          example: false

        employment:
          type: object
          properties:
            positionAppliedFor:
              description: The position the applicant is applying for.
              type: string
              minLength: 1
              maxLength: 34
              pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
              example: Primary School Teacher

            workforceType:
              description: The applicant's workforce type.
              type: string
              format: string
              enum:
                - child-and-adult
                - child
                - adult
                - other
              example: child-and-adult

            employerName:
              description: The name of the applicant's employer.
              type: string
              minLength: 1
              maxLength: 60
              pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
              example: Fake Company

        screening:
          type: object
          properties:
            workingWithAdults:
              description: If the applicant requires a DBS check with the adult barred list. This is only applicable to Enhanced checks.
              type: boolean
              example: true

            workingWithChildren:
              description: If the applicant requires a DBS check with the childrens barred list. This is only applicable to Enhanced checks.
              type: boolean
              example: true

            workingAtApplicantAddress:
              description: Indicates if the applicant is working at their home address. This is only applicable to Enhanced checks.
              type: boolean
              example: false

        manualVerification:
          description: If a digital ID check isn't being used, manual verification is needed.
          type: object
          properties:
            route:
              description: The route being used to verify the applicants identity.
              type: integer
              enum:
                - 1
                - 2
                - 3
              example: 1

            documents:
              type: array
              minItems: 3
              items:
                type: object
                properties:
                  documents:
                    type: object
                    properties:
                      type:
                        type: string

                      document:
                        type: string
                        example:
                          - type: "primary"
                            document: "Passport"
                          - type: "supporting"
                            document: "Biometric Residence Permit"
                          - type: "supporting"
                            document: "Adoption Certificate"

            checkedApplicantId:
              type: boolean
              example: true
              description: The user must check the applicant's ID inline with government guidelines. Must be true to submit.

            checkedApplicantAddress:
              type: boolean
              example: true
              description: The user must check the applicant's address inline with government guidelines. Must be true to submit.

            checkedApplicantDOB:
              type: boolean
              example: true
              description: The user must check the applicant's date of birth inline with government guidelines. Must be true to submit.

        client:
          description: The user who is processing the application must provide their details for government audit. This should be the user who is verifying the applicant's documentation.
          type: object
          properties:
            email:
              type: string
              format: email
              minLength: 1
              maxLength: 64
              pattern: '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/'
              example: joe@unitecompliance.co.uk

            firstName:
              type: string
              example: Joe
              minLength: 1
              maxLength: 30

            lastName:
              type: string
              example: Bloggs
              minLength: 1
              maxLength: 30

        requestPayment:
          description: Set this to true to collect payment from the applicant.
          type: boolean
          example: false

      required:
        - title
        - products
        - volunteer
        - adultFirstCheck
        - updateService
        - forename
        - surname
        - dob
        - gender
        - birthCountry
        - birthTown
        - email
        - isSurnameChanged
        - isNationalityChanged
        - hasOtherNames
        - currentAddress
        - unspentConvictions
        - employment
        - screening
        - manualVerification
        - client

      xml:
        name: submitDBS

    scottishDs:
      type: object
      properties:
        encryption:
          type: boolean
          example: false

        title:
          type: string
          enum:
            - MR
            - MRS
            - MISS

        products:
          type: array
          items:
            enum:
              - scottish-basic-dbs-check
            example: scottish-basic-dbs-check

        forename:
          type: string
          format: string
          example: Joe
          minLength: 2
          maxLength: 60

        surname:
          type: string
          format: string
          example: Blogs
          minLength: 2
          maxLength: 60

        dob:
          type: string
          format: dd-mm-yyyy
          pattern: "\\d{2}-\\d{2}-\\d{4}"
          example: 30-01-2000

        gender:
          type: string
          enum:
            - male
            - female
          example: male

        birthCountry:
          $ref: "#/components/schemas/countryCodes"
          example: GB

        birthTown:
          type: string
          example: Fake Town

        birthNationality:
          $ref: "#/components/schemas/countryCodes"
          example: GB

        email:
          type: string
          format: email

        niNumber:
          type: string
          format: string
          example: AA111111B

        phoneNumber:
          type: string
          example: "012345678910"

        motherMaidenName:
          type: string
          example: Jones

        hasOtherNames:
          type: object
          properties:
            status:
              type: boolean
              example: true

            names:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    format: string
                    enum:
                      - forename
                      - surname
                    example: forename

                  name:
                    type: string
                    format: string
                    example: Jeff

                  usedFromMonth:
                    type: string
                    format: string
                    pattern: '^\d{2}$'
                    example: "01"

                  usedFromYear:
                    type: string
                    format: string
                    example: "2010"

                  usedUntilMonth:
                    type: string
                    format: string
                    pattern: '^\d{2}$'
                    example: "12"

                  usedUntilYear:
                    type: string
                    format: string
                    example: "2020"

        currentAddress:
          $ref: "#/components/schemas/currentAddress"

        previousAddress:
          type: array
          maxItems: 200
          items:
            $ref: "#/components/schemas/previousAddress"

        passport:
          type: object
          properties:
            status:
              type: boolean
              example: true

            number:
              type: string
              format: string
              example: "123456789"

            issueCountry:
              $ref: "#/components/schemas/countryCodes"
              example: GB

            dateOfIssue:
              type: string
              format: dd-mm-yyyy
              pattern: "\\d{2}-\\d{2}-\\d{4}"
              example: 01-12-2023

        drivingLicence:
          type: object
          properties:
            status:
              type: boolean
              example: true

            number:
              type: string
              format: string
              example: "12345678"

            issueCountry:
              description: Only licences from GB, GI, GG, IE, IM, JE are accepted.
              type: string
              enum:
                - GB
                - GI
                - GG
                - IE
                - IM
                - JE
              example: GB

        nic:
          type: object
          properties:
            status:
              type: boolean
              example: true

            number:
              type: string
              example: "12345678"

            issueCountry:
              $ref: "#/components/schemas/countryCodes"
              example: GB

        manualVerification:
          type: object
          properties:
            route:
              type: string
              example: 1

            documents:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: primary

                  document:
                    type: string
                    example: driving licence photocard (full or provisional)

              example:
                - type: primary
                  document: driving licence photocard (full or provisional)
                - type: supporting
                  document: utility bill, such as gas, electric or phone bill

        client:
          type: object
          properties:
            email:
              type: string
              format: email
              example: joe@unitecompliance.co.uk

            firstName:
              type: string
              example: Joe

            lastName:
              type: string
              example: Bloggs

    countryCodes:
      type: string
      minLength: 2
      maxLength: 2
      description: These are ISO 3166-1 Alpha-2 country codes.
      example: GB
      enum:
        - AD
        - AE
        - AF
        - AG
        - AI
        - AL
        - AM
        - AN
        - AO
        - AQ
        - AR
        - AS
        - AT
        - AU
        - AW
        - AZ
        - BA
        - BB
        - BD
        - BE
        - BF
        - BG
        - BH
        - BI
        - BJ
        - BM
        - BN
        - BO
        - BR
        - BS
        - BT
        - BV
        - BW
        - BY
        - BZ
        - CA
        - CC
        - CD
        - CF
        - CG
        - CH
        - CI
        - CK
        - CL
        - CM
        - CN
        - CO
        - CR
        - CU
        - CV
        - CX
        - CY
        - CZ
        - DE
        - DJ
        - DK
        - DM
        - DO
        - DZ
        - EC
        - EE
        - EG
        - EH
        - ER
        - ES
        - ET
        - FI
        - FJ
        - FK
        - FM
        - FO
        - FR
        - FX
        - GA
        - GB
        - GD
        - GE
        - GF
        - GH
        - GI
        - GL
        - GM
        - GN
        - GP
        - GQ
        - GR
        - GS
        - GT
        - GU
        - GW
        - GY
        - HK
        - HM
        - HN
        - HR
        - HT
        - HU
        - ID
        - IE
        - IL
        - IN
        - IO
        - IQ
        - IR
        - IS
        - IT
        - JM
        - JO
        - JP
        - KE
        - KG
        - KH
        - KI
        - KM
        - KN
        - KP
        - KR
        - KW
        - KY
        - KZ
        - LA
        - LB
        - LC
        - LI
        - LK
        - LR
        - LS
        - LT
        - LU
        - LV
        - LX
        - LY
        - MA
        - MC
        - MD
        - MG
        - MH
        - MK
        - ML
        - MM
        - MN
        - MO
        - MP
        - MQ
        - MR
        - MS
        - MT
        - MU
        - MV
        - MW
        - MX
        - MY
        - MZ
        - NA
        - NC
        - NE
        - NF
        - NG
        - NI
        - NL
        - NO
        - NP
        - NR
        - NU
        - NZ
        - OM
        - PA
        - PE
        - PF
        - PG
        - PH
        - PK
        - PL
        - PM
        - PN
        - PR
        - PS
        - PT
        - PW
        - PY
        - QA
        - RE
        - RO
        - RU
        - RW
        - SA
        - SB
        - SC
        - SD
        - SE
        - SG
        - SH
        - SI
        - SJ
        - SK
        - SL
        - SM
        - SN
        - SO
        - SR
        - ST
        - SV
        - SY
        - SZ
        - TC
        - TD
        - TF
        - TG
        - TH
        - TJ
        - TK
        - TM
        - TN
        - TO
        - TP
        - TR
        - TT
        - TV
        - TW
        - TZ
        - UA
        - UG
        - UM
        - US
        - UY
        - UZ
        - VA
        - VC
        - VE
        - VG
        - VI
        - VN
        - VU
        - WF
        - WS
        - YE
        - YT
        - YU
        - ZA
        - ZM
        - ZR
        - ZW

    currentAddress:
      type: object
      required:
        - line1
        - town
        - country
        - monthMovedIn
        - yearMovedIn
      properties:
        line1:
          description: Line 1 of the applicant's current address.
          type: string
          minLength: 1
          maxLength: 60
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: 30 Fake Block

        line2:
          description: Line 2 of the applicant's current address, if applicable.
          type: string
          minLength: 1
          maxLength: 60
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake Street

        town:
          description: Town or city of the applicant's current address.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake Town

        country:
          description: The country code of the applicant's current address.
          $ref: "#/components/schemas/countryCodes"
          example: "GB"

        county:
          description: County or region of the applicant's current address.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake County

        postCode:
          description: Postal code of the applicant's current address. This is required if a GB address is being entered.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;]+)|([A-Z0-9\(\)\-/&apos;][A-Z 0-9\(\)\-/&apos;]*[A-Z0-9\(\)\-/&apos;])'
          example: DA101BB

        monthMovedIn:
          description: Month when the applicant moved into the current address (2 digits).
          type: string
          format: mm
          pattern: '^\d{2}$'
          example: "06"

        yearMovedIn:
          description: Year when the applicant moved into the current address.
          type: string
          format: yyyy
          pattern: '^\d{4}$'
          example: "2023"

        monthLivedUntil:
          description: Month when the applicant moved out of the current address (2 digits).
          type: string
          format: mm
          pattern: '^\d{2}$'
          example: "06"

        yearLivedUntil:
          description: Year when the applicant moved out of the current address.
          type: string
          format: yyyy
          pattern: '^\d{4}$'
          example: "2024"

    previousAddress:
      type: object
      required:
        - line1
        - town
        - country
        - monthMovedIn
        - yearMovedIn
        - monthLivedUntil
        - yearLivedUntil
      properties:
        line1:
          description: Line 1 of the applicant's previous address.
          type: string
          minLength: 1
          maxLength: 60
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: 32 Fake Block

        line2:
          description: Line 2 of the applicant's previous address, if applicable.
          type: string
          minLength: 1
          maxLength: 60
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake Road

        town:
          description: Town or city of the applicant's previous address
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake Town

        country:
          description: The country code of the applicant's previous address.
          $ref: "#/components/schemas/countryCodes"
          example: "GB"

        county:
          description: County or region of the applicant's previous address.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;&amp;]+)|([A-Z0-9\(\)\-/&apos;&amp;][A-Z 0-9\(\)\-/&apos;&amp;]*[A-Z0-9\(\)\-/&apos;&amp;])'
          example: Fake County

        postCode:
          description: Postal code of the applicant's previous address. This is required if a GB address is being entered.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '([A-Z0-9\(\)\-/&apos;]+)|([A-Z0-9\(\)\-/&apos;][A-Z 0-9\(\)\-/&apos;]*[A-Z0-9\(\)\-/&apos;])'
          example: DA101BB

        monthMovedIn:
          description: Month when the applicant moved into the previous address (2 digits).
          type: string
          format: mm
          pattern: '^\d{2}$'
          example: "10"

        yearMovedIn:
          description: Year when the applicant moved into the previous address.
          type: string
          format: yyyy
          pattern: '^\d{4}$'
          example: "2001"

        monthLivedUntil:
          description: Month when the applicant moved out of the previous address (2 digits).
          type: string
          format: mm
          pattern: '^\d{2}$'
          example: "06"

        yearLivedUntil:
          description: Year when the applicant moved out of the previous address.
          type: string
          format: yyyy
          pattern: '^\d{4}$'
          example: "2023"

    connectionTestResult:
      type: object
      properties:
        status:
          type: string
          example: success

        msg:
          type: string
          example: Your connection is successful.

    dbsSuccess:
      type: object
      properties:
        status:
          type: string
          example: success

        msg:
          type: string
          example: Your application has been submitted

        reference:
          type: string
          example: XX000000000

    postComment:
      type: object
      properties:
        comment:
          type: string
          example: Test Comment

        name:
          type: string
          example: Joe Bloggs

    getComments:
      type: object
      properties:
        comment:
          type: string
          example: Test Comment

        user:
          type: object
          properties:
            name:
              type: string
              example: Joe Bloggs

        date_time:
          type: string
          example: 2020/12/25 10:10:10 AM
      xml:
        name: commentResponse

    getStatus:
      type: object
      properties:
        status:
          type: string
          example: In Progress

    getAuditLog:
      type: object
      properties:
        action:
          type: string
        applicationStatus:
          type: string
        user:
          type: object
          properties:
            name:
              type: string
        date_time:
          type: string

    getResult:
      type: object
      properties:
        applicationFormReference:
          type: string
        rbApplicationReference:
          type: string
        disclosureStatus:
          type: string
        disclosureType:
          type: string
        disclosureNumber:
          type: string
        disclosureIssueDate:
          type: string
        applicantSurname:
          type: string
        applicantForename:
          type: string
        applicantDob:
          type: string
        applicantGender:
          type: string
          enum:
            - male
            - female
        addressLine1:
          type: string
        addressLine2:
          type: string
        addressTown:
          type: string
        addressCounty:
          type: string
        postcode:
          type: string
        countryCode:
          $ref: "#/components/schemas/countryCodes"
        otherNames:
          type: object
          properties:
            id:
              type: string
            other_name:
              type: string
            rb_application_reference:
              type: string
            result_id:
              type: string

    getResultPDF:
      type: object
      properties:
        downloadURL:
          type: string

        note:
          type: array
          items:
            example:
              - The download link will expire in 60 minutes.
              - After downloading the report, the link will expire.

    getTransactions:
      type: object
      properties:
        changeme:
          type: string

    response200:
      type: object
      properties:
        status:
          type: string
        msg:
          type: string
      xml:
        name: "response"

    response401:
      type: object
      properties:
        status:
          type: string
          example: fail

        msg:
          type: string
          example: Unauthorized

    response422:
      type: object
      properties:
        status:
          type: string
          example: fail
        msg:
          type: string
          example: Fail reason
        code:
          type: string
          example: "422"

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/documents"
  securitySchemes:
    api-key:
      type: apiKey
      name: api-key
      in: header
